{"version":3,"sources":["../src/memory-store.js"],"names":["_","MemoryStore","_memstore","cb","isFunction","Error","self","resolve","reject","result","mappingArr","Array","forEach","v","k","isUndefined","push","e","key","value","undefined","checkKey","JSON","parse","isString","isNumber","memoryStore"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAYA,C;;AACZ;;;;;;;;IAEMC,W;AACF,2BAAc;AAAA;;AACV,aAAKC,SAAL,GAAiB,EAAjB;AACH;;;;;iHACSC,E;;;;;;oCACDH,EAAEI,UAAF,CAAaD,EAAb,C;;;;;sCAAwB,IAAIE,KAAJ,CAAU,YAAV,C;;;AACzBC,oC,GAAO,I;iEACJ,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gEAAa,YAAM;AACf,4CAAI;AACA,gDAAIC,eAAJ;AAAA,gDAAYC,aAAa,IAAIC,KAAJ,EAAzB;AACAX,8CAAEY,OAAF,CAAUN,KAAKJ,SAAf,EAA0B,UAACW,CAAD,EAAIC,CAAJ,EAAU;AAChCL,yDAASN,GAAGU,CAAH,EAAMC,CAAN,CAAT;AACA,oDAAI,CAACd,EAAEe,WAAF,CAAcN,MAAd,CAAL,EAA4BC,WAAWM,IAAX,CAAgBP,MAAhB;AAC/B,6CAHD;AAIAF,oDAAQG,UAAR;AACH,yCAPD,CAOE,OAAOO,CAAP,EAAU;AACRT,mDAAOS,CAAP;AACH;AACJ,qCAXD;AAYH,iCAbM,C;;;;;;;;;;;;;;;;;;4BAePC,G,EAAwB;AAAA,gBAAnBC,KAAmB,uEAAXC,SAAW;;AACxB,gBAAI,CAACC,SAASH,GAAT,CAAL,EAAoB,MAAM,IAAIb,KAAJ,CAAU,kBAAV,CAAN;AACpB,iBAAKH,SAAL,CAAegB,GAAf,IAAsBC,KAAtB;AACA,mBAAO,IAAP;AACH;;;4BACGD,G,EAAK;AACL,gBAAI,CAACG,SAASH,GAAT,CAAL,EAAoB,MAAM,IAAIb,KAAJ,CAAU,kBAAV,CAAN;AACpB,mBAAO,KAAKH,SAAL,CAAegB,GAAf,CAAP;AACH;;;gCACMA,G,EAAK;AACR,gBAAI,CAACG,SAASH,GAAT,CAAL,EAAoB,MAAM,IAAIb,KAAJ,CAAU,kBAAV,CAAN;AACpB,mBAAO,KAAKH,SAAL,CAAegB,GAAf,CAAP;AACA,mBAAO,IAAP;AACH;;;gCACO;AACJ,iBAAKhB,SAAL,GAAiB,EAAjB;AACA,mBAAO,IAAP;AACH;;;gCACO;AACJ,mBAAOoB,KAAKC,KAAL,CAAW,iCAAU,KAAKrB,SAAf,CAAX,CAAP;AACH;;;;;AAEL,SAASmB,QAAT,CAAkBH,GAAlB,EAAuB;AACnB,WAAQlB,EAAEwB,QAAF,CAAWN,GAAX,KAAmBA,GAApB,IAA4BlB,EAAEyB,QAAF,CAAWP,GAAX,CAAnC;AACH;AACD,IAAIQ,cAAc,IAAIzB,WAAJ,EAAlB;QACSyB,W,GAAAA,W","file":"memory-store.js","sourcesContent":["import * as _ from 'lodash'\r\nimport stringify from 'json-stringify-safe'\r\n\r\nclass MemoryStore {\r\n    constructor() {\r\n        this._memstore = {}\r\n    }\r\n    async map(cb) {\r\n        if (!_.isFunction(cb)) throw new Error('请输入函数类型的参数')\r\n        let self = this\r\n        return new Promise((resolve, reject) => {\r\n            setImmediate(() => {\r\n                try {\r\n                    let result, mappingArr = new Array()\r\n                    _.forEach(self._memstore, (v, k) => {\r\n                        result = cb(v, k)\r\n                        if (!_.isUndefined(result)) mappingArr.push(result)\r\n                    })\r\n                    resolve(mappingArr)\r\n                } catch (e) {\r\n                    reject(e)\r\n                }\r\n            })\r\n        })\r\n    }\r\n    set(key, value = undefined) {\r\n        if (!checkKey(key)) throw new Error('Key的类型 只能为字符或者数字')\r\n        this._memstore[key] = value\r\n        return this\r\n    }\r\n    get(key) {\r\n        if (!checkKey(key)) throw new Error('Key的类型 只能为字符或者数字')\r\n        return this._memstore[key]\r\n    }\r\n    delete(key) {\r\n        if (!checkKey(key)) throw new Error('Key的类型 只能为字符或者数字')\r\n        delete this._memstore[key]\r\n        return this\r\n    }\r\n    flush() {\r\n        this._memstore = {}\r\n        return this\r\n    }\r\n    clone() {\r\n        return JSON.parse(stringify(this._memstore))\r\n    }\r\n}\r\nfunction checkKey(key) {\r\n    return (_.isString(key) && key) || _.isNumber(key)\r\n}\r\nlet memoryStore = new MemoryStore()\r\nexport { memoryStore }"]}